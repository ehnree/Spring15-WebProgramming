Security Report Rough Draft

Introduction - Provide a description of the product and what you were hired to do

Today's technological world moves at a breakneck pace. From frameworks to databases to applications, there is a seemingly 
endless stream of new technological applications and tools that are released each day. However, with new technologies come
new security and privacy issues. Holes in security garner the interest of malicious hackers who seek to capitalize
on these security flaws. 

The following is a report regarding gauging the security and privacy level of a web application. The web 
application retrieves location data from the client via a unique login, stores the data in a MongoDB database, and displays a Google Map 
with pins at the latitude and longitude of all other users stored in the database.   

Methodology - Describe your methodology pen testing the application, including the tools that you used

The main method of testing for security issues was making POST requests to the web application. This was conducted using 
the Postman - REST Client Google Chrome WebApp. A variety of different inputs were posted to the web application and their
impacts were analyzed both qualitatively and quantitatively. Black box testing was utilized initially, but further analysis 
was conducted along with white box testing. 

Testing environment:
	* Performed on a Dell Inspiron 15R Laptop with Intel(R) Core i3, 6GB RAM, Windows 8.1 64-bit
	* Internet Connection: TuftsWireless
	* Internet Browser: Google Chrome

Abstract of Findings - Provide an overview of all the security and privacy issues you identified. This section should be written for non-technical managers who do not have technical expertise and do not have time to read the entire document. Write this section using lay language.

Most if not all security issues that arose were directly caused by
malicious or mismanaged user input. For example, user input could be
used to inject code that would run on other user's browsers. The consequences are as open ended as the code; injected code from
an outside source range from annoying popups to making a website 
completely inaccessible.  

Issues Found - For each issue that you find, document:
Issue (e.g., database injection, really bad programming practice)
Location / page where issue was found
Severity of issue (e.g., low, medium , or high). Justify your answer.
Description of issue. How did you find it? A screenshot of problem is excellent.
Proof of vulnerability. Screenshots are ideal.
Resolution. How did you resolve the issue? Show code if possible.


Cross Site Scripting (XSS)

Location: GET '/' API

Description:
	Cross site scripting is totally undefended against by the web application. Attacks could be executed by writing a Javascript
	script as an input field of the POST API. The GET '/' API then
	prints out all the fields of each document in the web app 
	collection on the client browser. The effect is any Javascript
	contained in any document's field is executed by the client's
	browser. 

Severity: HIGH 
	Injection of Javascript from user input can have crippling impacts 
	on a website's security and privacy. Although the extent of the XSS
	injected for this study was relatively harmless, Javascript can
	easily be used maliciously. Examples include redirecting users that
	load the script to malicious webpages, which may themselves have 
	malicious Javascript. Such Javascript can be used to steal 
	sensitive information stored in the client's browser, such as 
	login information for websites. With a user's login information,
	the hacker can use this information to access user accounts with
	personal information such as a person's name, address, and phone number. However, the consequences may be far more severe if the login information grants the hacker access to a website that stores the user's social security number, credit card information, medical 
	information, etc.. 

Discovery:
	An attack can be conducted by making a POST request with a script
	injected within one of the required fields in the request. 

Resolution: 
	When printing < or >, cleanse input by outputting &lt; and &gt; instead. This prevents "<script>...</script>" from being outputted on the 
	user browser. Consequently, any script injected will not be injected 
	as the browser will not execute the script since the script is contained within "&lt;script&gt;...&lt;/script&gt;".




Lack of Restriction on Input Size

Location: POST API

Description:
	There is no limit explicitly set by the client or server side of 
	the web app on the size of user input submitted. Consequently, extremely large documents may be stored in the web app database.
	Generally, user input should rarely exceed even several tens of bytes as only login (string), lat (float), and lng (float) are 
	used per document. However, a very large string can be stored in
	the login field of the user input and be stored in the database. This
	presents a large security issue as this exploit can be used to maliciously affect website performance. 

Severity: HIGH 

	
Discovery:
	This issue was discovered when making POST requests with extremely large user input. A large text file (~92kb) would be stored within the login field of the user input. The login would then be slightly edited to store another unique document of extremely large size in the database. The process was repeated numerous times until the size of the response exceeded one MB. 

Resolution: 
	

Conclusion:

